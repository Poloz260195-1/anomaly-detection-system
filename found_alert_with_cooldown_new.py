"""
–°–∏—Å—Ç–µ–º–∞ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –∞–Ω–æ–º–∞–ª–∏–π –≤ –ø—Ä–æ–¥—É–∫—Ç–æ–≤—ã—Ö –º–µ—Ç—Ä–∏–∫–∞—Ö
–ê–Ω–∞–ª–∏–∑ –Ω–∞ –æ–¥–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã —Å —Ä–∞—Å—Ç—É—â–∏–º–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è–º–∏
"""

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import telegram
from datetime import date
import io
import sys
import os
from io import StringIO
import requests
import pandahouse as ph
from datetime import datetime, timedelta
import json

from airflow.decorators import dag, task
from airflow.operators.python import get_current_context

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–ª–æ–≤–∞—Ä–∏ –º–µ—Ç—Ä–∏–∫ –æ–¥–∏–Ω —Ä–∞–∑ –≤ –Ω–∞—á–∞–ª–µ —Ñ–∞–π–ª–∞
METRICS_LENTA = {
    'users_lenta': '–ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –≤ –ª–µ–Ω—Ç–µ', 
    'views_per_user': '–ü—Ä–æ—Å–º–æ—Ç—Ä—ã –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', 
    'likes_per_user': '–õ–∞–π–∫–∏ –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', 
    'CTR': 'CTR'
}

METRICS_MESSAGE = {
    'users_message': '–ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –≤ –º–µ—Å—Å–µ–Ω–¥–∂–µ—Ä–µ', 
    'sent_message_per_user': '–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –º–µ—Å—Å–µ–Ω–¥–∂–µ—Ä–µ'
}

# –û–±—ä–µ–¥–∏–Ω—è–µ–º —Å–ª–æ–≤–∞—Ä–∏ –¥–ª—è —É–¥–æ–±–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–æ–¥–ø–∏—Å–∏
METRICS_FULL = {**METRICS_LENTA, **METRICS_MESSAGE}

# –ü—Ä–æ—Å—Ç–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –∞–ª–µ—Ä—Ç–æ–≤ –≤ –ø–∞–º—è—Ç–∏
alert_history = {}

def cleanup_old_alerts(current_time):
    """–û—á–∏—â–∞–µ—Ç —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏ –∞–ª–µ—Ä—Ç–æ–≤ (—Å—Ç–∞—Ä—à–µ 1 –¥–Ω—è)"""
    global alert_history
    today = current_time.date().isoformat()
    for metric in list(alert_history):
        alert_history[metric] = [a for a in alert_history[metric] if a['date'] == today]
        if not alert_history[metric]:
            del alert_history[metric]

def can_send_alert(metric_name, current_time, cooldown_hours=4, max_alerts_per_day=6):
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–Ω–æ –ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∞–ª–µ—Ä—Ç –¥–ª—è –¥–∞–Ω–Ω–æ–π –º–µ—Ç—Ä–∏–∫–∏"""
    global alert_history
    today = current_time.date().isoformat()
    
    # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏ (—Å—Ç–∞—Ä—à–µ 1 –¥–Ω—è)
    cleanup_old_alerts(current_time)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–ª–µ—Ä—Ç–æ–≤ –∑–∞ —Å–µ–≥–æ–¥–Ω—è
    metric_alerts = alert_history.get(metric_name, [])
    today_alerts = [x for x in metric_alerts if x['date'] == today]
    
    if len(today_alerts) >= max_alerts_per_day:
        print(f"–î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –∞–ª–µ—Ä—Ç–æ–≤ –Ω–∞ –¥–µ–Ω—å ({max_alerts_per_day}) –¥–ª—è –º–µ—Ç—Ä–∏–∫–∏ {metric_name}")
        return False
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—É–ª–¥–∞—É–Ω –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –º–µ—Ç—Ä–∏–∫–∏
    if metric_alerts:
        # –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –∞–ª–µ—Ä—Ç (—Å–∞–º—ã–π –Ω–æ–≤—ã–π)
        last_alert = max(metric_alerts, key=lambda x: x['timestamp'])
        last_alert_time = datetime.fromisoformat(last_alert['timestamp'])
        time_since_last = current_time - last_alert_time
        
        if time_since_last < timedelta(hours=cooldown_hours):
            print(f"–ö—É–ª–¥–∞—É–Ω –¥–ª—è –º–µ—Ç—Ä–∏–∫–∏ {metric_name}: {time_since_last}")
            return False
    
    return True

def record_alert(metric_name, current_time):
    """–ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –∞–ª–µ—Ä—Ç"""
    global alert_history
    alert_info = {
        'timestamp': current_time.isoformat(),
        'date': current_time.date().isoformat()
    }
    if metric_name not in alert_history:
        alert_history[metric_name] = []
    alert_history[metric_name].append(alert_info)

def check_anomaly(data, metric, threshold=0.3):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∞–Ω–æ–º–∞–ª—å–Ω–æ—Å—Ç—å –º–µ—Ç—Ä–∏–∫–∏ –ø—É—Ç–µ–º —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —Å –∞–Ω–∞–ª–æ–≥–∏—á–Ω—ã–º –ø–µ—Ä–∏–æ–¥–æ–º –Ω–µ–¥–µ–ª—é –Ω–∞–∑–∞–¥
    –ö–õ–Æ–ß–ï–í–û–ï –£–õ–£–ß–®–ï–ù–ò–ï: –ê–Ω–∞–ª–∏–∑ –Ω–∞ –æ–¥–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    last_ts = data['ts'].max()
    week_ago_ts = last_ts - pd.DateOffset(days=7)
    
    try:
        last_value = data[data['ts'] == last_ts][metric].iloc[0]
        week_ago_value = data[data['ts'] == week_ago_ts][metric].iloc[0]
    except IndexError:
        return 0, None, None, last_ts, None, week_ago_ts

    # –í—ã—á–∏—Å–ª—è–µ–º –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ
    diff = (last_value / week_ago_value - 1)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–æ–ª—å—à–µ –ª–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫–∏ –∑–∞–¥–∞–Ω–Ω–æ–≥–æ –ø–æ—Ä–æ–≥–∞ threshold
    if abs(diff) > threshold:
        is_alert = 1
    else:
        is_alert = 0 
        
    return is_alert, last_value, diff, last_ts, week_ago_value, week_ago_ts

def send_plot(data, metric, last_ts, week_ago_ts, dataset_name):
    """–°–æ–∑–¥–∞–µ—Ç –≥—Ä–∞—Ñ–∏–∫ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —Ç–µ–∫—É—â–∏—Ö –∏ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö"""
    # –ë–µ—Ä–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞ –¥–≤–∞ –ø–æ–ª–Ω—ã—Ö –¥–Ω—è: –ø–æ—Å–ª–µ–¥–Ω–∏–π –∏ –Ω–µ–¥–µ–ª—é –Ω–∞–∑–∞–¥
    target_dates = [last_ts.date(), week_ago_ts.date()]
    data_filtered = data[data['date'].isin(target_dates)]
    
    # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º –∫–æ–ª–æ–Ω–∫–∏
    if dataset_name == 'lenta':
        data_filtered = data_filtered.rename(columns=METRICS_LENTA)
    else:
        data_filtered = data_filtered.rename(columns=METRICS_MESSAGE)
    
    sns.set(rc={'figure.figsize': (16, 10)})
    plt.tight_layout()

    ax = sns.lineplot(
        data=data_filtered.sort_values(by=['date', 'hm']),
        x="hm", 
        y=METRICS_FULL.get(metric, metric),
        hue="date"
    )

    for ind, label in enumerate(ax.get_xticklabels()):
        if ind % 15 == 0:
            label.set_visible(True)
        else:
            label.set_visible(False)
    ax.set(xlabel='–í—Ä–µ–º—è')
    ax.set(ylabel=METRICS_FULL.get(metric, metric))

    ax.set_title(f'{METRICS_FULL.get(metric, metric)}')
    ax.set(ylim=(0, None))

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ñ–∞–π–ª–æ–≤—ã–π –æ–±—ä–µ–∫—Ç
    plot_object = io.BytesIO()
    ax.figure.savefig(plot_object)
    plot_object.seek(0)
    plot_object.name = '{0}.png'.format(metric)
    plt.close()
    
    return plot_object

def run_alerts_with_cooldown(chat_id):
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ —Å–∏—Å—Ç–µ–º—ã –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –∞–Ω–æ–º–∞–ª–∏–π"""
    bot = telegram.Bot(token=BOT_TOKEN)
    current_time = datetime.now()
    
    # === –£–õ–£–ß–®–ï–ù–ù–´–ï –ó–ê–ü–†–û–°–´ –° –ê–ù–ê–õ–ò–ó–û–ú –ù–ê –û–î–ù–û–ì–û –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø ===
    q_1 = '''SELECT 
                ts,
                date,
                hm,
                users_lenta,
                views / users_lenta AS views_per_user,
                likes / users_lenta AS likes_per_user,
                likes / views AS CTR
            FROM (
                SELECT 
                    toStartOfFifteenMinutes(time) AS ts,
                    toDate(time) AS date,
                    formatDateTime(toStartOfFifteenMinutes(time), '%R') AS hm,
                    uniqExact(user_id) AS users_lenta,
                    sum(action = 'view') AS views,
                    sum(action = 'like') AS likes
                FROM simulator_20250620.feed_actions
                WHERE time >= today() - 14
                      AND time < now()
                GROUP BY ts
            )
            ORDER BY ts'''
    
    df_lenta = ph.read_clickhouse(query=q_1, connection=connection)
    
    q_2 = '''SELECT 
                ts,
                date,
                hm,
                users_message,
                sent_message / users_message AS sent_message_per_user
            FROM (
                SELECT 
                    toStartOfFifteenMinutes(time) AS ts,
                    toDate(time) AS date,
                    formatDateTime(toStartOfFifteenMinutes(time), '%R') AS hm,
                    uniqExact(user_id) AS users_message,
                    count(*) AS sent_message
                FROM simulator_20250620.message_actions
                WHERE time >= today() - 14
                      AND time < now()
                GROUP BY ts
            )
            ORDER BY ts'''
    
    df_message = ph.read_clickhouse(query=q_2, connection=connection)
    
    # === –û–ë–ù–û–í–õ–ï–ù–ù–´–ï –ú–ï–¢–†–ò–ö–ò –° –§–û–ö–£–°–û–ú –ù–ê –û–î–ù–û–ì–û –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø ===
    metrics_lenta = ['views_per_user', 'likes_per_user', 'CTR']  # –£–±—Ä–∞–ª–∏ users_lenta
    metrics_message = ['sent_message_per_user']  # –£–±—Ä–∞–ª–∏ users_message
    
    dataframes = {
        'lenta': (df_lenta, metrics_lenta),
        'message': (df_message, metrics_message)
    }
    
    for name, (data, metrics) in dataframes.items():
        for metric in metrics:
            is_alert, last_value, diff, last_ts, _, week_ago_ts = check_anomaly(data, metric, threshold=0.3)
            
            if is_alert:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–Ω–æ –ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∞–ª–µ—Ä—Ç
                if can_send_alert(metric, current_time, cooldown_hours=4, max_alerts_per_day=6):
                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
                    if last_value > week_ago_value:
                        direction = "üìà –£–í–ï–õ–ò–ß–ï–ù–ò–ï"
                        emoji = "üî¥"
                    else:
                        direction = "üìâ –£–ú–ï–ù–¨–®–ï–ù–ò–ï"
                        emoji = "üü°"
                    
                    text = f'{emoji} <b>–ê–ù–û–ú–ê–õ–ò–Ø –û–ë–ù–ê–†–£–ñ–ï–ù–ê</b>\n\n'
                    text += f'<b>–ú–µ—Ç—Ä–∏–∫–∞:</b> {METRICS_FULL.get(metric, metric)}\n'
                    text += f'<b>–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:</b> {direction}\n'
                    text += f'<b>–¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:</b> {last_value:.2f}\n'
                    text += f'<b>–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ:</b> {diff:.1%}\n'
                    text += f'<b>–í—Ä–µ–º—è –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è:</b> {current_time.strftime("%Y-%m-%d %H:%M")}\n\n'
                    text += f'<i>–°–ª–µ–¥—É—é—â–∏–π –∞–ª–µ—Ä—Ç –¥–ª—è —ç—Ç–æ–π –º–µ—Ç—Ä–∏–∫–∏ –±—É–¥–µ—Ç –≤–æ–∑–º–æ–∂–µ–Ω —á–µ—Ä–µ–∑ 4 —á–∞—Å–∞</i>'
                    
                    plot_object = send_plot(data, metric, last_ts, week_ago_ts, name)
                    
                    try:
                        bot.send_message(chat_id=chat_id, text=text, parse_mode='HTML')
                        bot.send_photo(chat_id=chat_id, photo=plot_object)
                        
                        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –∞–ª–µ—Ä—Ç
                        record_alert(metric, current_time)
                        
                        print(f"‚úÖ –ê–ª–µ—Ä—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –¥–ª—è –º–µ—Ç—Ä–∏–∫–∏ {metric}")
                        
                    except Exception as e:
                        print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–ª–µ—Ä—Ç–∞: {e}")
                else:
                    print(f"‚è≥ –ê–ª–µ—Ä—Ç –¥–ª—è –º–µ—Ç—Ä–∏–∫–∏ {metric} –ø—Ä–æ–ø—É—â–µ–Ω (–∫—É–ª–¥–∞—É–Ω/–ª–∏–º–∏—Ç)")

# === CONFIG ===
connection = {
    'host': 'https://clickhouse.lab.karpov.courses',
    'database': 'simulator_20250620',
    'user': 'student',
    'password': 'dpo_python_2020'
}

BOT_TOKEN = '8241718618:AAFW4Y6NE-Uf8ksiPL7zytCx6f8wmlu8MFA'

# –°–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç—á—ë—Ç–æ–≤
chat_ids = [
    -969316925,  # –æ—Å–Ω–æ–≤–Ω–æ–π —á–∞—Ç –ê–õ–ï–†–¢–´ | KC –°–∏–º—É–ª—è—Ç–æ—Ä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞
]

default_args = {
    'owner': 'aleksej-polozov-bel8894',
    'depends_on_past': False,
    'start_date': datetime(2025, 7, 18),
    'retries': 2,
    'retry_delay': timedelta(minutes=5),
}

# –ò–Ω—Ç–µ—Ä–≤–∞–ª –∑–∞–ø—É—Å–∫–∞ DAG
schedule_interval = '*/15 * * * *'  # –ö–∞–∂–¥—ã–µ 15 –º–∏–Ω—É—Ç

@dag(
    dag_id='aleksej_polozov_bel8894_alerts_report_with_cooldown', 
    default_args=default_args, 
    schedule_interval=schedule_interval, 
    catchup=False,
    tags=['anomaly-detection', 'monitoring', 'alerts', 'per-user-analysis']
)
def dag_report():
    
    @task()
    def report_text():
        for chat_id in chat_ids:
            run_alerts_with_cooldown(chat_id)
        
    # –í—ã–∑—ã–≤–∞–µ–º —Ç–∞—Å–∫–∏ ‚Äî —Å–æ–∑–¥–∞—ë–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
    task1 = report_text()

    # –ü–æ—Ä—è–¥–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
    task1 
    
dag = dag_report()

if __name__ == "__main__":
    # –î–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    print("üöÄ –ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –∞–Ω–æ–º–∞–ª–∏–π...")
    print("üìä –ê–Ω–∞–ª–∏–∑ –º–µ—Ç—Ä–∏–∫ –Ω–∞ –æ–¥–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...")
    
    for chat_id in chat_ids:
        run_alerts_with_cooldown(chat_id)
    
    print("‚úÖ –°–∏—Å—Ç–µ–º–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞") 